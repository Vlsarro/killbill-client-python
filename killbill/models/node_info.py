# coding: utf-8

"""
    Kill Bill

    Kill Bill is an open-source billing and payments platform  # noqa: E501

    OpenAPI spec version: 0.24.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from killbill.configuration import Configuration


class NodeInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_name': 'str',
        'boot_time': 'datetime',
        'last_updated_date': 'datetime',
        'kb_version': 'str',
        'api_version': 'str',
        'plugin_api_version': 'str',
        'common_version': 'str',
        'platform_version': 'str',
        'plugins_info': 'list[PluginInfo]'
    }

    attribute_map = {
        'node_name': 'nodeName',
        'boot_time': 'bootTime',
        'last_updated_date': 'lastUpdatedDate',
        'kb_version': 'kbVersion',
        'api_version': 'apiVersion',
        'plugin_api_version': 'pluginApiVersion',
        'common_version': 'commonVersion',
        'platform_version': 'platformVersion',
        'plugins_info': 'pluginsInfo'
    }

    def __init__(self, node_name=None, boot_time=None, last_updated_date=None, kb_version=None, api_version=None, plugin_api_version=None, common_version=None, platform_version=None, plugins_info=None, _configuration=None):  # noqa: E501
        """NodeInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._node_name = None
        self._boot_time = None
        self._last_updated_date = None
        self._kb_version = None
        self._api_version = None
        self._plugin_api_version = None
        self._common_version = None
        self._platform_version = None
        self._plugins_info = None
        self.discriminator = None

        if node_name is not None:
            self.node_name = node_name
        if boot_time is not None:
            self.boot_time = boot_time
        if last_updated_date is not None:
            self.last_updated_date = last_updated_date
        if kb_version is not None:
            self.kb_version = kb_version
        if api_version is not None:
            self.api_version = api_version
        if plugin_api_version is not None:
            self.plugin_api_version = plugin_api_version
        if common_version is not None:
            self.common_version = common_version
        if platform_version is not None:
            self.platform_version = platform_version
        if plugins_info is not None:
            self.plugins_info = plugins_info

    @property
    def node_name(self):
        """Gets the node_name of this NodeInfo.  # noqa: E501


        :return: The node_name of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this NodeInfo.


        :param node_name: The node_name of this NodeInfo.  # noqa: E501
        :type: str
        """

        self._node_name = node_name

    @property
    def boot_time(self):
        """Gets the boot_time of this NodeInfo.  # noqa: E501


        :return: The boot_time of this NodeInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._boot_time

    @boot_time.setter
    def boot_time(self, boot_time):
        """Sets the boot_time of this NodeInfo.


        :param boot_time: The boot_time of this NodeInfo.  # noqa: E501
        :type: datetime
        """

        self._boot_time = boot_time

    @property
    def last_updated_date(self):
        """Gets the last_updated_date of this NodeInfo.  # noqa: E501


        :return: The last_updated_date of this NodeInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """Sets the last_updated_date of this NodeInfo.


        :param last_updated_date: The last_updated_date of this NodeInfo.  # noqa: E501
        :type: datetime
        """

        self._last_updated_date = last_updated_date

    @property
    def kb_version(self):
        """Gets the kb_version of this NodeInfo.  # noqa: E501


        :return: The kb_version of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._kb_version

    @kb_version.setter
    def kb_version(self, kb_version):
        """Sets the kb_version of this NodeInfo.


        :param kb_version: The kb_version of this NodeInfo.  # noqa: E501
        :type: str
        """

        self._kb_version = kb_version

    @property
    def api_version(self):
        """Gets the api_version of this NodeInfo.  # noqa: E501


        :return: The api_version of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this NodeInfo.


        :param api_version: The api_version of this NodeInfo.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def plugin_api_version(self):
        """Gets the plugin_api_version of this NodeInfo.  # noqa: E501


        :return: The plugin_api_version of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._plugin_api_version

    @plugin_api_version.setter
    def plugin_api_version(self, plugin_api_version):
        """Sets the plugin_api_version of this NodeInfo.


        :param plugin_api_version: The plugin_api_version of this NodeInfo.  # noqa: E501
        :type: str
        """

        self._plugin_api_version = plugin_api_version

    @property
    def common_version(self):
        """Gets the common_version of this NodeInfo.  # noqa: E501


        :return: The common_version of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._common_version

    @common_version.setter
    def common_version(self, common_version):
        """Sets the common_version of this NodeInfo.


        :param common_version: The common_version of this NodeInfo.  # noqa: E501
        :type: str
        """

        self._common_version = common_version

    @property
    def platform_version(self):
        """Gets the platform_version of this NodeInfo.  # noqa: E501


        :return: The platform_version of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._platform_version

    @platform_version.setter
    def platform_version(self, platform_version):
        """Sets the platform_version of this NodeInfo.


        :param platform_version: The platform_version of this NodeInfo.  # noqa: E501
        :type: str
        """

        self._platform_version = platform_version

    @property
    def plugins_info(self):
        """Gets the plugins_info of this NodeInfo.  # noqa: E501


        :return: The plugins_info of this NodeInfo.  # noqa: E501
        :rtype: list[PluginInfo]
        """
        return self._plugins_info

    @plugins_info.setter
    def plugins_info(self, plugins_info):
        """Sets the plugins_info of this NodeInfo.


        :param plugins_info: The plugins_info of this NodeInfo.  # noqa: E501
        :type: list[PluginInfo]
        """

        self._plugins_info = plugins_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NodeInfo):
            return True

        return self.to_dict() != other.to_dict()
